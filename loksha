@IBAction func qouteVCButtonAction(_ sender: Any) {
    let quote = currentQoute.randomElement()
    UIView.animate(withDuration: 0.5, animations: {
        self.qouteLabel.transform = CGAffineTransform(translationX: -self.view.bounds.width, y: 0)
        self.authorLabel.transform = CGAffineTransform(translationX: -self.view.bounds.width, y: 0)
    }) { _ in
        self.qouteLabel.text = ""
        self.authorLabel.text = ""
        self.qouteLabel.transform = CGAffineTransform(translationX: self.view.bounds.width, y: 0)
        self.authorLabel.transform = CGAffineTransform(translationX: self.view.bounds.width, y: 0)
        UIView.animate(withDuration: 0.5) {
            self.qouteLabel.transform = .identity
            self.authorLabel.transform = .identity
        } completion: { _ in
            self.typeWriterEffect(quote?.text ?? "", on: self.qouteLabel) {
                self.qouteLabel.transform = .identity
                UIView.animate(withDuration: 1.0, delay: 0, usingSpringWithDamping: 0.2, initialSpringVelocity: 10.0, options: .curveEaseInOut, animations: {
                    self.qouteLabel.transform = CGAffineTransform(a: 0.8, b: 0, c: 0, d: 0.8, tx: 0, ty: 0)
                }, completion: nil)
            }
            self.typeWriterEffect(quote?.author ?? "", on: self.authorLabel) {
                self.authorLabel.transform = .identity
                UIView.animate(withDuration: 1.0, delay: 0, usingSpringWithDamping: 0.2, initialSpringVelocity: 10.0, options: .curveEaseInOut, animations: {
                    self.authorLabel.transform = CGAffineTransform(a: 0.8, b: 0, c: 0, d: 0.8, tx: 0, ty: 0)
                }, completion: nil)
            }
        }
    }
}
