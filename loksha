func fetchQuiz(completion: @escaping ([Quiz]?) -> Void) {
    var retryCount = 0
    let maxRetries = 5 // adjust this value to your liking
    
    func attemptFetch() {
        // Define the URL for the GitHub API
        for link in links {
            let token = "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"
            let url = URL(string: link)!
            
            // Define the headers for the request
            var request = URLRequest(url: url, cachePolicy: .useProtocolCachePolicy)
            request.httpMethod = "GET"
            request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
            
            // Make the request
            let task = URLSession.shared.dataTask(with: request) { data, response, error in
                if let error = error {
                    print("Error making request: \(error)")
                    retryCount += 1
                    if retryCount < maxRetries {
                        attemptFetch()
                    } else {
                        completion(nil)
                    }
                    return
                }
                
                guard let data = data else {
                    print("No data returned")
                    retryCount += 1
                    if retryCount < maxRetries {
                        attemptFetch()
                    } else {
                        completion(nil)
                    }
                    return
                }
                
                // Parse the JSON data
                do {
                    let quizes = try JSONDecoder().decode(Quizes.self, from: data)
                    if quizes.results.isEmpty {
                        retryCount += 1
                        if retryCount < maxRetries {
                            attemptFetch()
                        } else {
                            completion(nil)
                        }
                    } else {
                        completion(quizes.results)
                    }
                } catch {
                    print("Error parsing JSON: \(error)")
                    retryCount += 1
                    if retryCount < maxRetries {
                        attemptFetch()
                    } else {
                        completion(nil)
                    }
                }
            }
            
            // Handle the response
            task.resume()
        }
    }
    
    attemptFetch()
}
